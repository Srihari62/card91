# ONE
/api/resource/tabTransaction/:name.http.get:
  summary: Fetch tabTransaction
  description: Fetch tabTransaction from database
  fn: com.biz.mysql.tabtransaction.one
  params:
    - name: name
      in: path
      required: true
      schema:
        type: string
  responses:
    content:
      application/json:
        schema:
          type: object

# CREATE
/api/resource/transaction.http.post:
  summary: Create a new tabTransaction
  description: Create tabTransaction from database
  fn: com.biz.mysql.tabtransaction.create
  body:
    content:
      application/json:
        schema:
          $ref: '#/definitions/mysql/tabTransaction'
  responses:
    content:
      application/json:
        schema:
          type: object

# UPDATE
/mysql/tabtransaction/:name.http.put:
  summary: Update a tabTransaction
  description: Update tabTransaction from database
  fn: com.biz.mysql.tabtransaction.update
  body:
    content:
      application/json:
        schema:
          $ref: '#/definitions/mysql/tabTransaction'
  params:
    - name: name
      in: path
      required: true
      schema:
        type: string
  responses:
    content:
      application/json:
        schema:
          type: object

# DELETE
/mysql/tabtransaction/:name.http.delete:
  summary: Delete a tabTransaction
  description: Delete tabTransaction from database
  fn: com.biz.mysql.tabtransaction.delete
  params:
    - name: name
      in: path
      required: true
      schema:
        type: string
  responses:
    content:
      application/json:
        schema:
          type: object

# SEARCH
/api/resource/transaction.http.get:
  summary: Fetch multiple tabTransaction
  description: Fetch multiple tabTransaction from database
  fn: com.biz.mysql.tabtransaction.search
  params:
    - name: limit_page_length
      in: query
      required: false
      schema:
        type: integer
    - name: limit_start
      in: query
      required: false
      schema:
        type: integer
    - name: fields
      in: query
      required: false
      schema:
        type: string
  body:
    content:
      application/json:
        schema:
          type: object
  responses:
    content:
      application/json:
        schema:
          type: array

